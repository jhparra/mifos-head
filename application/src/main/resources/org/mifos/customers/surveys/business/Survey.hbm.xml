<?xml version="1.0" encoding='UTF-8'?>
<!DOCTYPE hibernate-mapping PUBLIC
                            "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
                            "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd" >
<hibernate-mapping>
	<class name="org.mifos.customers.surveys.business.Survey" table="survey">
		<id name="surveyId" column="survey_id" type="integer" unsaved-value="0" access="field">
			<generator class="native"/>
		</id>
		<property name="name" column="survey_name"/>
		<property name="appliesTo" column="survey_applies_to"/>
		<property name="dateOfCreation" column="date_of_creation"/>
		<property name="state" column="state" not-null="true"/>
		<list name="questions" lazy="false" inverse="true" cascade="save-update">
			<key column="survey_id" not-null="true"/>
			<index column="question_order"/>
			<one-to-many class="org.mifos.customers.surveys.business.SurveyQuestion"/>
		</list>
		
		<joined-subclass table="ppi_survey" name="org.mifos.customers.ppi.business.PPISurvey">
			<key column="survey_id"/>
			<property name="veryPoorMin" column="very_poor_min"/>
			<property name="veryPoorMax" column="very_poor_max"/>
			<property name="poorMin" column="poor_min"/>
			<property name="poorMax" column="poor_max"/>
			<property name="atRiskMin" column="at_risk_min"/>
			<property name="atRiskMax" column="at_risk_max"/>
			<property name="nonPoorMin" column="non_poor_min"/>
			<property name="nonPoorMax" column="non_poor_max"/>
			<property name="country" column="country_id"/>
			<list name="likelihoods" lazy="true" inverse="true" cascade="save-update">
				<key column="survey_id" not-null="true"/>
				<index column="likelihood_order"/>
				<one-to-many class="org.mifos.customers.ppi.business.PPILikelihood"/>
			</list>
		</joined-subclass>
	</class>
	<query name="surveys.isActiveSurveysForSurveyType">
		<![CDATA[select count(*) from Survey as survey where (survey.appliesTo=:SURVEY_TYPE or survey.appliesTo='all') and survey.state=:SURVEY_STATE]]>
	</query>
	<query name="surveys.retrieveAllSurveys">
		<![CDATA[from Survey as survey order by survey.name]]>
	</query>
	<query name="surveys.retrieveSurveysByType">
		<![CDATA[from Survey as survey where survey.appliesTo=:SURVEY_TYPE or survey.appliesTo='all' order by survey.name]]>
	</query>
    <query name="surveys.retrieveNonPPISurveysByType">
		<![CDATA[from Survey as survey where survey.class != PPISurvey and (survey.appliesTo=:SURVEY_TYPE or survey.appliesTo='all') order by survey.name]]>
	</query>
	<query name="surveys.retrieveSurveysByName">
		<![CDATA[from Survey as survey where survey.name=:SURVEY_NAME order by survey.name]]>
	</query>
	<query name="surveys.retrieveSurveysByState">
		<![CDATA[from Survey as survey where survey.state=:SURVEY_STATE order by survey.name]]>
	</query>
	<query name="surveys.retrieveSurveysByTypeAndState">
		<![CDATA[from Survey as survey where (survey.appliesTo=:SURVEY_TYPE or survey.appliesTo='all') and survey.state=:SURVEY_STATE order by survey.name]]>
	</query>
	<query name="surveys.retrieveCustomersSurveys">
		<![CDATA[from Survey as survey where survey.appliesTo='client' or survey.appliesTo='group' or survey.appliesTo='center' or survey.appliesTo='all' order by survey.name]]>
	</query>	
	<query name="surveys.retrieveAccountsSurveys">
		<![CDATA[from Survey as survey where survey.appliesTo='loan' or survey.appliesTo='savings' or survey.appliesTo='all' order by survey.name]]>
	</query>
	<query name="surveys.retrieveActivePPISurvey">
		<![CDATA[from PPISurvey as survey where survey.state=1 order by survey.name]]>
	</query>
	<query name="surveys.retrieveAllPPISurveys">
		<![CDATA[from PPISurvey as survey order by survey.name]]>
	</query>
	<query name="surveys.retrievePPISurveyByCountry">
		<![CDATA[from PPISurvey as survey where survey.country=:COUNTRY]]>
	</query>
</hibernate-mapping>